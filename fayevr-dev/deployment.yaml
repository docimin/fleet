apiVersion: apps/v1
kind: Deployment
metadata:
  name: fayevr-dev-prod
  namespace: default
spec:
  replicas: 1 # Adjust based on your scaling needs
  selector:
    matchLabels:
      app: fayevr-dev-prod
  template:
    metadata:
      labels:
        app: fayevr-dev-prod
    spec:
      containers:
        - name: fayevr-dev-prod-container
          image: harbor.fayevr.dev/fleet/fayevr.dev:0.2.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
          envFrom:
            - secretRef:
                name: fayevr-dev-variables
      imagePullSecrets:
        - name: harbor-secret
---
apiVersion: v1
kind: Service
metadata:
  name: fayevr-dev-prod-service
  namespace: default
spec:
  selector:
    app: fayevr-dev-prod
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fayevr-dev-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx" # Adjust this if you use a different ingress controller
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-prod" # Replace with your cert-manager issuer
spec:
  rules:
    - host: fayevr.dev # Replace with your domain name
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: fayevr-dev-prod-service
                port:
                  number: 80
  tls:
    - hosts:
        - fayevr.dev # Replace with your domain name
      secretName: fayevr-dev-tls # Name of the secret to store the TLS certificate